#! /usr/bin/env python3
# -*- coding: utf-8 -*-

from xml.dom.minidom import parseString, Node
from haversine import haversine, Unit
from pathlib import Path
from multiprocessing import Pool
from xml.etree.ElementTree import Element, Comment
import xml.etree.ElementTree as ET
import multiprocessing
import os
import textwrap
import glob
import re
import sys
import subprocess
import yaml
import argparse
import time
import platform

def print_red(text):
    error_message = print(f"\033[1m\033[31m{text}\033[0m")
    return error_message


def print_green(text):
    success_message = print(f"\033[1m\033[32m{text}\033[0m")
    return success_message


# TODO add output format argument (gpi, csv, etc.)?
# maybe unneccesary
def get_default_pbf_file():
    try:
        # Get the directory of the script
        start_dir = Path.cwd()
        # Find the first *.pbf file in the script directory
        pbf_file = next(start_dir.glob("*.pbf"), None)
        if pbf_file is None:
            print_red("Error: No *.pbf file found in the script directory.")
            sys.exit(1)
        return str(pbf_file)
    except Exception as e:
        print_red(f"An error occurred while trying to read the *.pbf file: {e}")
        sys.exit(1)


# Create the parser
parser = argparse.ArgumentParser(
    description="Commandline tool for filtering OSM nodes from *.pbf files and converting them to GPI files for Garmin GPS devices."
)

# Add an argument for the PBF file
parser.add_argument(
    "-pbf",
    type=Path,
    default=get_default_pbf_file(),
    help="The *.pbf file to process. Default: Uses the alphabetically first *.pbf file in the script directory.",
)
parser.add_argument(
    "-f",
    action="store_false",
    help=f"Deactivate node filtering (default: Activated). If deactivated, all nodes will be extracted. If activated, nodes within a certain distance of each other will be filtered out. The distance is specified in the POIs.yaml file.",
)
parser.add_argument(
    "-m",
    action="store_true",
    help=f"Activate multiprocessing (default: Single-Core-Processing). Useful for large *.pbf files. This uses ALL YOUR CORES MINUS TWO! Note: Multiprocessing might not work on Windows. Use single processing if you encounter any issues.",
)
# Parse the arguments
args = parser.parse_args()


#################### FUNCTIONS ####################
def run_subprocess(command):
    command_name = command.split()[0]  # Get the name of the command
    print(f"Running {command_name} with command:\n{str(command)}\n")
    error_messages = {
        "osmosis": f"{command_name} failed to extract nodes. Check the error message above.",
        "gpsbabel": f"{command_name} failed to create GPI-File",
    }
    try:
        result = subprocess.run(
            command,
            stdout=subprocess.PIPE,
            stderr=subprocess.STDOUT,
            shell=True,
            check=True,
        )
        if command_name == "osmosis":  # osmosis has a command feedback
            print(f"{command_name} output:\n{result.stdout.decode()}")
        print_green(f"{command_name} finished successfully")
        return result.returncode
    except subprocess.CalledProcessError as e:
        print_red(f"{command_name} Error:\n{e.output.decode()}")
        if command_name in error_messages:
            print_red(f"{error_messages[command_name]}\n")
        sys.exit(1)


def create_directory(path):
    """
    Create a directory and its parents if they don't exist
    """
    path = Path(path)  # Convert to Path object
    try:
        if not os.path.exists(path):
            print(f"Creating directory: {path}\n")
            path.mkdir(parents=True)
    except PermissionError:
        print_red(f"Error: Permission denied when trying to create directory: {path}")
        sys.exit(1)
    except OSError as e:
        print_red(f"Error: Unable to create directory: {path}. Reason: {e.strerror}")
        sys.exit(1)


def extract_nodes_osmosis(pbf_file, poi, poi_dict, working_path):
    try:
        osm_raw_path = os.path.join(working_path, "osm_raw")
        osmosis_output = os.path.join(osm_raw_path, f"{poi}.osm")
        create_directory(osm_raw_path)
        osmosis_command = textwrap.dedent(f"""osmosis --read-pbf file=\"{pbf_file}\" --node-key-value keyValueList=\"{poi_dict[poi][1]}\" --write-xml file=\"{osmosis_output}\" """ )
        if platform.system() == 'Windows':
            exit_status = run_subprocess(osmosis_command.replace("\\","\\\\"))
        else:
            exit_status = run_subprocess(osmosis_command)
        if exit_status == 0:  # If the subprocess was successful
            print(
                f'\033[1mSuccessfully extracted "{poi}" nodes to {osmosis_output}\033[0m'
            )
    except KeyError:
        print_red(f"Error: The POI '{poi}' is not found in the POI dictionary.")
    except Exception as e:
        print_red(f"An error occurred: {str(e)}")


def parse_xml(xml_file):
    xml_filename = Path(xml_file).name
    try:
        tree = ET.parse(xml_file)  # Parse the XML file
    except ET.ParseError:
        print_red(f"ParseError: The file {xml_filename} is not a well-formed XML file.")
        sys.exit(1)
    root = tree.getroot()  # Get the root of the tree (the <osm> tag)
    return root


def filter_nodes(root, dist):
    processed_nodes = []
    removed_nodes = {}
    all_nodes = root.findall("node")
    for current_node in all_nodes:
        lat = float(current_node.get("lat"))
        lon = float(current_node.get("lon"))
        if processed_nodes:
            for prev_node in processed_nodes:
                if (
                    haversine(
                        (lat, lon), (prev_node[0], prev_node[1]), unit=Unit.METERS
                    )
                    < dist
                ):
                    root.remove(current_node)
                    removed_nodes[prev_node[2]] = removed_nodes.get(prev_node[2], 0) + 1
                    break
            else:
                processed_nodes.append((lat, lon, current_node))
                removed_nodes[current_node] = 0
        else:
            processed_nodes.append((lat, lon, current_node))
            removed_nodes[current_node] = 0
    return root, removed_nodes


def process_tags(current_node, selected_keys_list):
    all_tags = current_node.findall("tag")

    kept_tags = []
    for tag in all_tags:
        tag_key = tag.get("k")
        if tag_key in selected_keys_list:
            kept_tags.append(tag)

    # Sort the kept_tags list based on the index of the tag key in the selected_keys_list
    kept_tags.sort(key=lambda tag: selected_keys_list.index(tag.get("k")))

    tag_entries = []
    for tag in kept_tags:
        tag_key = tag.get("k").capitalize()
        tag_value = tag.get("v")
        entry = f"{tag_key}: {tag_value}"
        if len(entry) > 35:
            entry = "||".join([entry[i : i + 35] for i in range(0, len(entry), 35)])
        tag_entries.append(entry)

    current_node.set("id", "||".join(tag_entries))
    return current_node


def filter_xml(xml_file, dist):
    root = parse_xml(xml_file)
    root, removed_nodes = filter_nodes(root, dist)
    selected_keys_list = [
        "removed_nodes",
        # identify
        "name",
        "brand",
        # type
        "amenity",
        "shop",
        "tourism",
        "opening_hours",
        # contact
        "website",
        "contact:website",
        "phone",
        "contact:phone",
        "mobile",
        "email",
        "contact:email",
        # detailed information
        "fee",
        "reservation",
        "caravans",
        "tents",
        "fireplace",
        "leisure",
        "stars",
    ]
    all_nodes = root.findall("node")
    for current_node in all_nodes:
        removed_count_tag = Element("tag")
        removed_count_tag.set("k", "removed_nodes")
        removed_count_tag.set("v", str(removed_nodes[current_node]))
        current_node.insert(0, removed_count_tag)
        current_node.insert(1, Comment("\n "))
        current_node = process_tags(current_node, selected_keys_list)
    return root


def write_xml(root, working_path, poi):
    try:
        osm_filtered_path = os.path.join(working_path, "osm_filtered")
        osm_filtered_output = os.path.join(osm_filtered_path, f"filtered_{poi}.osm")
        create_directory(osm_filtered_path)
        print(f"Writing filtered nodes to {osm_filtered_output}...\n")
        # Write the XML declaration
        xml_string = ET.tostring(root, encoding="utf-8", method="xml")
        # Decode bytes to string
        xml_string = xml_string.decode("utf-8")
        # Remove spaces before />
        xml_string = re.sub(" />", "/>", xml_string)
        # Pretty print the XML
        xml_dom = parseString(xml_string)
        pretty_xml_string = xml_dom.toprettyxml(indent=" ", newl="")
        # Replace all '||' characters with '&#xA;'
        pretty_xml_string = pretty_xml_string.replace("||", "&#xA;")
        # Write the modified XML string to the file
        with open(osm_filtered_output, "w",encoding="utf-8", errors="replace") as f:
            f.write(pretty_xml_string)
    except PermissionError:
        print_red(
            f"Error: Permission denied when trying to write to file: {osm_filtered_output}"
        )
    except OSError as e:
        print_red(
            f"Error: Unable to write to file: {osm_filtered_output}. Reason: {e.strerror}"
        )
    except Exception as e:
        print_red(f"An error occurred while writing the filtered XML file: {e}")


def create_gpi_gpsbabel(working_path, inputdir, poi):
    try:
        icon_input = os.path.join(working_path, "Icons", f"{poi}.bmp")
        gpi_path = os.path.join(working_path, "GPI")
        gpi_output = os.path.join(gpi_path, f"{poi}.gpi")
        create_directory(gpi_path)
        if inputdir == "osm_filtered":
            osm_filtered_path = os.path.join(working_path, "osm_filtered")
            gpsbabel_command = textwrap.dedent(f"""gpsbabel -i osm -f {os.path.join(osm_filtered_path, f"filtered_{poi}.osm")} -o garmin_gpi,category={poi},bitmap={icon_input},unique=0 -F {gpi_output}""")
        else:
            osm_raw_path = os.path.join(working_path, inputdir)
            gpsbabel_command = textwrap.dedent(f""" gpsbabel -i osm -f {os.path.join(osm_raw_path, f"{poi}.osm")} -o garmin_gpi,category={poi},bitmap={icon_input},unique=0 -F {gpi_output}""")
        if platform.system() == 'Windows':
            exit_status = run_subprocess(gpsbabel_command.replace("\\","\\\\"))
        else:
            exit_status = run_subprocess(gpsbabel_command)
        if exit_status == 0:
            print(f"\033[1mSuccessfully created GPI file{gpi_path}.gpi\033[0m\n")
    except FileNotFoundError:
        print_red(
            f"Error: File not found when trying to create GPI file for POI: {poi}"
        )
    except PermissionError:
        print_red(
            f"Error: Permission denied when trying to create GPI file for POI: {poi}"
        )
    except Exception as e:
        print(f"An error occurred: {str(e)}")


def is_filtering_activated(filter_arg):
    if filter_arg:
        print(f"\nFiltering is set to \033[1m\033[32m{filter_arg}\033[0m\n")
        return True
    else:
        print(f"\nFiltering is set to \033[1m\033[31m{filter_arg}\033[0m\n")
        return False


############ MULTIPROCESSING ############


def process_poi(poi, pbf_file_name, poi_dict, working_path):
    osm_filtered_path = os.path.join(working_path, "osm_filtered")
    osm_raw_path = os.path.join(working_path, "osm_raw")
    try:
        extract_nodes_osmosis(pbf_file_name, poi, poi_dict, working_path)
        if is_filtering_activated(args.f):
            filtered_nodes = filter_xml(
                f"{os.path.join(osm_raw_path, f'{poi}.osm')}",
                poi_dict[poi][0],
            )
            write_xml(
                filtered_nodes,
                working_path,
                poi,
            )
            create_gpi_gpsbabel(osm_filtered_path, poi)
        else:
            create_gpi_gpsbabel(osm_raw_path, poi)
    except Exception as e:
        print_red(f"An error occurred while processing POI '{poi}': {str(e)}")


def main_multi(pbf_file_name):
    start_time = time.time()
    working_path = Path.cwd()
    print(f"\n\033[1m\033[34mProcessing {pbf_file_name}...\033[0m")
    print(f"\n\033[1mUsing multiprocessing...\033[0m")
    # Get the number of cores in the CPU
    num_cores = multiprocessing.cpu_count()
    # Use two less than the number of cores
    num_processes = max(1, num_cores - 2)
    print(
        f"Starting multiprocessing. Using {num_processes} of {multiprocessing.cpu_count()} cores"
    )
    is_filtering_activated(args.f)
    try:
        with open("POIs.yaml", "r", encoding="utf-8",errors="replace) as poi_file:
            poi_dict = yaml.safe_load(poi_file)
    except FileNotFoundError:
        print_red("POIs.yaml file not found.")
        return

    with Pool(num_processes) as p:
        p.starmap(
            process_poi,
            [(poi, pbf_file_name, poi_dict, working_path) for poi in poi_dict],
        )
    end_time = time.time()

    # Print the total time
    total_time = end_time - start_time
    print(f"\nTotal time: {total_time:.2f} seconds")


############# NORMAL PROCESSING #############


def main_single(pbf_file_name):
    start_time = time.time()
    working_path = Path.cwd()
    print(f"\n\033[1m\033[34mProcessing {pbf_file_name}...\033[0m")
    print(f"\n\033[1mUsing single processing...\033[0m")

    is_filtering_activated(args.f)

    try:
        with open("POIs.yaml", "r", encoding="utf-8",errors="replace) as poi_file:
            poi_dict = yaml.safe_load(poi_file)
    except FileNotFoundError:
        print_red("POIs.yaml file not found.")
        sys.exit(1)
    except yaml.YAMLError as e:
        print_red(f"An error occurred while trying to read the POIs.yaml file: {e}")
        sys.exit(1)
    except PermissionError:
        print_red(f"Error: Permission denied when trying to read the POIs.yaml file.")
        sys.exit(1)
    except Exception as e:
        print_red(f"An error occurred while trying to read the POIs.yaml file: {e}")
        sys.exit(1)

    for poi in poi_dict:
        try:
            extract_nodes_osmosis(pbf_file_name, poi, poi_dict, working_path)
            if is_filtering_activated(args.f):
                filtered_nodes = filter_xml(
                    f"{os.path.join(working_path, 'osm_raw', f'{poi}.osm')}",
                    poi_dict[poi][0],
                )
                write_xml(
                    filtered_nodes,
                    working_path,
                    poi,
                )
                create_gpi_gpsbabel(working_path, "osm_filtered", poi)
            else:
                create_gpi_gpsbabel(working_path, "osm_raw", poi)
        except Exception as e:
            print_red(f"An error occurred while processing POI '{poi}': {str(e)}")
    end_time = time.time()

    # Print the total time
    total_time = end_time - start_time
    print(f"\nTotal time: {total_time:.2f} seconds")


if __name__ == "__main__":
    if args.m:
        main_multi(args.pbf)
    else:
        main_single(args.pbf)
